# -*- coding: utf-8 -*-
"""day_38,40_assignments.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1C0Vob5cOg5F33F4vzhHt5ZRGNmmu0xJm
"""

#day 38 assignment
from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.tree import DecisionTreeClassifier
from sklearn.pipeline import make_pipeline
import pandas as pd

# Sample input text and corresponding labels
texts = [
    "I love programming",
    "Python is great",
    "Machine learning is amazing",
    "I enjoy coding in Python",
    "Deep learning is fascinating",
    "Spam messages are annoying",
    "I won a lottery",
    "This is a normal message"
]
labels = ["Programming", "Python", "Machine Learning", "Programming", "Machine Learning", "Spam", "Spam", "Normal"]

# Create a pipeline with TfidfVectorizer and DecisionTreeClassifier
model = make_pipeline(TfidfVectorizer(), DecisionTreeClassifier())

# Train the model
model.fit(texts, labels)

# Predict the category of a new text
new_text = ["You have won a free prize"]
predicted_category = model.predict(new_text)

print("Predicted Category:", predicted_category[0])

# Bag of Words Representation
bow_vectorizer = CountVectorizer()
bow_matrix = bow_vectorizer.fit_transform(texts)

# Convert BoW matrix to DataFrame for better visualization
bow_df = pd.DataFrame(bow_matrix.toarray(), columns=bow_vectorizer.get_feature_names_out())
print("\nBag of Words Representation:")
print(bow_df)

# TF-IDF Representation
tfidf_vectorizer = TfidfVectorizer()
tfidf_matrix = tfidf_vectorizer.fit_transform(texts)

# Convert TF-IDF matrix to DataFrame
tfidf_df = pd.DataFrame(tfidf_matrix.toarray(), columns=tfidf_vectorizer.get_feature_names_out())
print("\nTF-IDF Representation:")
print(tfidf_df)

#day 40 assignment
from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.pipeline import make_pipeline
import pandas as pd

# Sample input text and corresponding labels
texts = [
    "I love programming",
    "Python is great",
    "Machine learning is amazing",
    "I enjoy coding in Python",
    "Deep learning is fascinating",
    "Spam messages are annoying",
    "I won a lottery",
    "This is a normal message",
    "Buy now and win a prize",
    "Normal email content",
    "Congratulations, you won!"
]
labels = ["Programming", "Python", "Machine Learning", "Programming", "Machine Learning", "Spam", "Spam", "Normal", "Spam", "Normal", "Spam"]

# Create a pipeline with TfidfVectorizer and RandomForestClassifier
model = make_pipeline(TfidfVectorizer(), RandomForestClassifier())

# Train the model
model.fit(texts, labels)

# Predict the category of a new text
new_text = ["Exclusive offer just for you"]
predicted_category = model.predict(new_text)

print("Predicted Category:", predicted_category[0])

# Bag of Words Representation
bow_vectorizer = CountVectorizer()
bow_matrix = bow_vectorizer.fit_transform(texts)

# Convert BoW matrix to DataFrame for better visualization
bow_df = pd.DataFrame(bow_matrix.toarray(), columns=bow_vectorizer.get_feature_names_out())
print("\nBag of Words Representation:")
print(bow_df)

# TF-IDF Representation
tfidf_vectorizer = TfidfVectorizer()
tfidf_matrix = tfidf_vectorizer.fit_transform(texts)

# Convert TF-IDF matrix to DataFrame
tfidf_df = pd.DataFrame(tfidf_matrix.toarray(), columns=tfidf_vectorizer.get_feature_names_out())
print("\nTF-IDF Representation:")
print(tfidf_df)